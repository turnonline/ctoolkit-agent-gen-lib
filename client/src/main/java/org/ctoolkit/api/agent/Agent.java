/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2017-02-15 17:18:02 UTC)
 * on 2017-07-26 at 11:06:38 UTC 
 * Modify at your own risk.
 */

package org.ctoolkit.api.agent;

/**
 * Service definition for Agent (v1).
 *
 * <p>
 * REST API for Cloud Toolkit Migration Agent
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link AgentRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Agent extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.22.0 of the Cloud Toolkit Migration Agent library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myapi.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "agent/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Agent(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  public Agent(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Audit collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Agent agent = new Agent(...);}
   *   {@code Agent.Audit.List request = agent.audit().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Audit audit() {
    return new Audit();
  }

  /**
   * The "audit" collection of methods.
   */
  public class Audit {

    /**
     * Create a request for the method "audit.list".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends AgentRequest<org.ctoolkit.api.agent.model.MetadataAuditCollection> {

      private static final String REST_PATH = "audit";

      /**
       * Create a request for the method "audit.list".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.MetadataAuditCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private String orderBy;

      /**
     [ default: createDate]
     [

       */
      public String getOrderBy() {
        return orderBy;
      }

      public List setOrderBy(String orderBy) {
        this.orderBy = orderBy;
        return this;
      }

      @com.google.api.client.util.Key
      private Boolean ascending;

      /**
     [ default: false]
     [

       */
      public Boolean getAscending() {
        return ascending;
      }

      public List setAscending(Boolean ascending) {
        this.ascending = ascending;
        return this;
      }

      /**
       * Convenience method that returns only {@link Boolean#TRUE} or {@link Boolean#FALSE}.
       *
       * <p>
       * Boolean properties can have four possible values:
       * {@code null}, {@link com.google.api.client.util.Data#NULL_BOOLEAN}, {@link Boolean#TRUE}
       * or {@link Boolean#FALSE}.
       * </p>
       *
       * <p>
       * This method returns {@link Boolean#TRUE} if the default of the property is {@link Boolean#TRUE}
       * and it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * {@link Boolean#FALSE} is returned if the default of the property is {@link Boolean#FALSE} and
       * it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * </p>
       *
       * <p>
       *
       * </p>
       */
      public boolean isAscending() {
        if (ascending == null || ascending == com.google.api.client.util.Data.NULL_BOOLEAN) {
          return false;
        }
        return ascending;
      }

      @com.google.api.client.util.Key
      private Integer start;

      /**
     [ default: 0]
     [

       */
      public Integer getStart() {
        return start;
      }

      public List setStart(Integer start) {
        this.start = start;
        return this;
      }

      @com.google.api.client.util.Key
      private Integer length;

      /**
     [ default: 10]
     [

       */
      public Integer getLength() {
        return length;
      }

      public List setLength(Integer length) {
        this.length = length;
        return this;
      }

      @com.google.api.client.util.Key
      private String ownerId;

      /**

       */
      public String getOwnerId() {
        return ownerId;
      }

      public List setOwnerId(String ownerId) {
        this.ownerId = ownerId;
        return this;
      }

      @com.google.api.client.util.Key
      private String operation;

      /**

       */
      public String getOperation() {
        return operation;
      }

      public List setOperation(String operation) {
        this.operation = operation;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the ExportBatch collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Agent agent = new Agent(...);}
   *   {@code Agent.ExportBatch.List request = agent.exportBatch().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public ExportBatch exportBatch() {
    return new ExportBatch();
  }

  /**
   * The "exportBatch" collection of methods.
   */
  public class ExportBatch {

    /**
     * Create a request for the method "exportBatch.delete".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Delete delete(Long id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends AgentRequest<Void> {

      private static final String REST_PATH = "export/{id}";

      /**
       * Create a request for the method "exportBatch.delete".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Delete(Long id) {
        super(Agent.this, "DELETE", REST_PATH, null, Void.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete setAlt(String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private Long id;

      /**

       */
      public Long getId() {
        return id;
      }

      public Delete setId(Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "exportBatch.get".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Get get(Long id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends AgentRequest<org.ctoolkit.api.agent.model.ExportBatch> {

      private static final String REST_PATH = "export/{id}";

      /**
       * Create a request for the method "exportBatch.get".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Get(Long id) {
        super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.ExportBatch.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private Long id;

      /**

       */
      public Long getId() {
        return id;
      }

      public Get setId(Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "exportBatch.insert".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link org.ctoolkit.api.agent.model.ExportBatch}
     * @return the request
     */
    public Insert insert(org.ctoolkit.api.agent.model.ExportBatch content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends AgentRequest<org.ctoolkit.api.agent.model.ExportBatch> {

      private static final String REST_PATH = "export";

      /**
       * Create a request for the method "exportBatch.insert".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link org.ctoolkit.api.agent.model.ExportBatch}
       * @since 1.13
       */
      protected Insert(org.ctoolkit.api.agent.model.ExportBatch content) {
        super(Agent.this, "POST", REST_PATH, content, org.ctoolkit.api.agent.model.ExportBatch.class);
      }

      @Override
      public Insert setAlt(String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "exportBatch.list".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends AgentRequest<org.ctoolkit.api.agent.model.ExportBatchCollection> {

      private static final String REST_PATH = "export";

      /**
       * Create a request for the method "exportBatch.list".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.ExportBatchCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private String orderBy;

      /**

       */
      public String getOrderBy() {
        return orderBy;
      }

      public List setOrderBy(String orderBy) {
        this.orderBy = orderBy;
        return this;
      }

      @com.google.api.client.util.Key
      private Integer start;

      /**
     [ default: 0]
     [

       */
      public Integer getStart() {
        return start;
      }

      public List setStart(Integer start) {
        this.start = start;
        return this;
      }

      @com.google.api.client.util.Key
      private Integer length;

      /**
     [ default: 10]
     [

       */
      public Integer getLength() {
        return length;
      }

      public List setLength(Integer length) {
        this.length = length;
        return this;
      }

      @com.google.api.client.util.Key
      private Boolean ascending;

      /**
     [ default: true]
     [

       */
      public Boolean getAscending() {
        return ascending;
      }

      public List setAscending(Boolean ascending) {
        this.ascending = ascending;
        return this;
      }

      /**
       * Convenience method that returns only {@link Boolean#TRUE} or {@link Boolean#FALSE}.
       *
       * <p>
       * Boolean properties can have four possible values:
       * {@code null}, {@link com.google.api.client.util.Data#NULL_BOOLEAN}, {@link Boolean#TRUE}
       * or {@link Boolean#FALSE}.
       * </p>
       *
       * <p>
       * This method returns {@link Boolean#TRUE} if the default of the property is {@link Boolean#TRUE}
       * and it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * {@link Boolean#FALSE} is returned if the default of the property is {@link Boolean#FALSE} and
       * it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * </p>
       *
       * <p>
       *
       * </p>
       */
      public boolean isAscending() {
        if (ascending == null || ascending == com.google.api.client.util.Data.NULL_BOOLEAN) {
          return true;
        }
        return ascending;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "exportBatch.update".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param id
     * @param content the {@link org.ctoolkit.api.agent.model.ExportBatch}
     * @return the request
     */
    public Update update(Long id, org.ctoolkit.api.agent.model.ExportBatch content) throws java.io.IOException {
      Update result = new Update(id, content);
      initialize(result);
      return result;
    }

    public class Update extends AgentRequest<org.ctoolkit.api.agent.model.ExportBatch> {

      private static final String REST_PATH = "export/{id}";

      /**
       * Create a request for the method "exportBatch.update".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @param content the {@link org.ctoolkit.api.agent.model.ExportBatch}
       * @since 1.13
       */
      protected Update(Long id, org.ctoolkit.api.agent.model.ExportBatch content) {
        super(Agent.this, "PUT", REST_PATH, content, org.ctoolkit.api.agent.model.ExportBatch.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Update setAlt(String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private Long id;

      /**

       */
      public Long getId() {
        return id;
      }

      public Update setId(Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Item collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Agent agent = new Agent(...);}
     *   {@code Agent.Item.List request = agent.item().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Item item() {
      return new Item();
    }

    /**
     * The "item" collection of methods.
     */
    public class Item {

      /**
       * Create a request for the method "item.delete".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param metadataId
       * @param id
       * @return the request
       */
      public Delete delete(Long metadataId, Long id) throws java.io.IOException {
        Delete result = new Delete(metadataId, id);
        initialize(result);
        return result;
      }

      public class Delete extends AgentRequest<Void> {

        private static final String REST_PATH = "export/{metadataId}/item/{id}";

        /**
         * Create a request for the method "item.delete".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param metadataId
         * @param id
         * @since 1.13
         */
        protected Delete(Long metadataId, Long id) {
          super(Agent.this, "DELETE", REST_PATH, null, Void.class);
          this.metadataId = com.google.api.client.util.Preconditions.checkNotNull(metadataId, "Required parameter metadataId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Delete setAlt(String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setFields(String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUserIp(String userIp) {
          return (Delete) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long metadataId;

        /**

         */
        public Long getMetadataId() {
          return metadataId;
        }

        public Delete setMetadataId(Long metadataId) {
          this.metadataId = metadataId;
          return this;
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Delete setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "item.get".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param metadataId
       * @param id
       * @return the request
       */
      public Get get(Long metadataId, Long id) throws java.io.IOException {
        Get result = new Get(metadataId, id);
        initialize(result);
        return result;
      }

      public class Get extends AgentRequest<org.ctoolkit.api.agent.model.ExportItem> {

        private static final String REST_PATH = "export/{metadataId}/item/{id}";

        /**
         * Create a request for the method "item.get".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param metadataId
         * @param id
         * @since 1.13
         */
        protected Get(Long metadataId, Long id) {
          super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.ExportItem.class);
          this.metadataId = com.google.api.client.util.Preconditions.checkNotNull(metadataId, "Required parameter metadataId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get setAlt(String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setFields(String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUserIp(String userIp) {
          return (Get) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long metadataId;

        /**

         */
        public Long getMetadataId() {
          return metadataId;
        }

        public Get setMetadataId(Long metadataId) {
          this.metadataId = metadataId;
          return this;
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Get setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "item.insert".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       *
       * @param metadataId
       * @param content the {@link org.ctoolkit.api.agent.model.ExportItem}
       * @return the request
       */
      public Insert insert(Long metadataId, org.ctoolkit.api.agent.model.ExportItem content) throws java.io.IOException {
        Insert result = new Insert(metadataId, content);
        initialize(result);
        return result;
      }

      public class Insert extends AgentRequest<org.ctoolkit.api.agent.model.ExportItem> {

        private static final String REST_PATH = "export/{metadataId}/item";

        /**
         * Create a request for the method "item.insert".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
         * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param metadataId
         * @param content the {@link org.ctoolkit.api.agent.model.ExportItem}
         * @since 1.13
         */
        protected Insert(Long metadataId, org.ctoolkit.api.agent.model.ExportItem content) {
          super(Agent.this, "POST", REST_PATH, content, org.ctoolkit.api.agent.model.ExportItem.class);
          this.metadataId = com.google.api.client.util.Preconditions.checkNotNull(metadataId, "Required parameter metadataId must be specified.");
        }

        @Override
        public Insert setAlt(String alt) {
          return (Insert) super.setAlt(alt);
        }

        @Override
        public Insert setFields(String fields) {
          return (Insert) super.setFields(fields);
        }

        @Override
        public Insert setKey(String key) {
          return (Insert) super.setKey(key);
        }

        @Override
        public Insert setOauthToken(String oauthToken) {
          return (Insert) super.setOauthToken(oauthToken);
        }

        @Override
        public Insert setPrettyPrint(Boolean prettyPrint) {
          return (Insert) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Insert setQuotaUser(String quotaUser) {
          return (Insert) super.setQuotaUser(quotaUser);
        }

        @Override
        public Insert setUserIp(String userIp) {
          return (Insert) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long metadataId;

        /**

         */
        public Long getMetadataId() {
          return metadataId;
        }

        public Insert setMetadataId(Long metadataId) {
          this.metadataId = metadataId;
          return this;
        }

        @Override
        public Insert set(String parameterName, Object value) {
          return (Insert) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "item.update".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * @param metadataId
       * @param id
       * @param content the {@link org.ctoolkit.api.agent.model.ExportItem}
       * @return the request
       */
      public Update update(Long metadataId, Long id, org.ctoolkit.api.agent.model.ExportItem content) throws java.io.IOException {
        Update result = new Update(metadataId, id, content);
        initialize(result);
        return result;
      }

      public class Update extends AgentRequest<org.ctoolkit.api.agent.model.ExportItem> {

        private static final String REST_PATH = "export/{metadataId}/item/{id}";

        /**
         * Create a request for the method "item.update".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param metadataId
         * @param id
         * @param content the {@link org.ctoolkit.api.agent.model.ExportItem}
         * @since 1.13
         */
        protected Update(Long metadataId, Long id, org.ctoolkit.api.agent.model.ExportItem content) {
          super(Agent.this, "PUT", REST_PATH, content, org.ctoolkit.api.agent.model.ExportItem.class);
          this.metadataId = com.google.api.client.util.Preconditions.checkNotNull(metadataId, "Required parameter metadataId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Update setAlt(String alt) {
          return (Update) super.setAlt(alt);
        }

        @Override
        public Update setFields(String fields) {
          return (Update) super.setFields(fields);
        }

        @Override
        public Update setKey(String key) {
          return (Update) super.setKey(key);
        }

        @Override
        public Update setOauthToken(String oauthToken) {
          return (Update) super.setOauthToken(oauthToken);
        }

        @Override
        public Update setPrettyPrint(Boolean prettyPrint) {
          return (Update) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Update setQuotaUser(String quotaUser) {
          return (Update) super.setQuotaUser(quotaUser);
        }

        @Override
        public Update setUserIp(String userIp) {
          return (Update) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long metadataId;

        /**

         */
        public Long getMetadataId() {
          return metadataId;
        }

        public Update setMetadataId(Long metadataId) {
          this.metadataId = metadataId;
          return this;
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Update setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Update set(String parameterName, Object value) {
          return (Update) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Job collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Agent agent = new Agent(...);}
     *   {@code Agent.Job.List request = agent.job().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Job job() {
      return new Job();
    }

    /**
     * The "job" collection of methods.
     */
    public class Job {

      /**
       * Create a request for the method "job.cancel".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
       *
       * @param id
       * @return the request
       */
      public Cancel cancel(Long id) throws java.io.IOException {
        Cancel result = new Cancel(id);
        initialize(result);
        return result;
      }

      public class Cancel extends AgentRequest<org.ctoolkit.api.agent.model.ExportJob> {

        private static final String REST_PATH = "export/{id}/job";

        /**
         * Create a request for the method "job.cancel".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Cancel#execute()} method to invoke the remote operation. <p> {@link
         * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param id
         * @since 1.13
         */
        protected Cancel(Long id) {
          super(Agent.this, "PUT", REST_PATH, null, org.ctoolkit.api.agent.model.ExportJob.class);
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Cancel setAlt(String alt) {
          return (Cancel) super.setAlt(alt);
        }

        @Override
        public Cancel setFields(String fields) {
          return (Cancel) super.setFields(fields);
        }

        @Override
        public Cancel setKey(String key) {
          return (Cancel) super.setKey(key);
        }

        @Override
        public Cancel setOauthToken(String oauthToken) {
          return (Cancel) super.setOauthToken(oauthToken);
        }

        @Override
        public Cancel setPrettyPrint(Boolean prettyPrint) {
          return (Cancel) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Cancel setQuotaUser(String quotaUser) {
          return (Cancel) super.setQuotaUser(quotaUser);
        }

        @Override
        public Cancel setUserIp(String userIp) {
          return (Cancel) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Cancel setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Cancel set(String parameterName, Object value) {
          return (Cancel) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "job.progress".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Progress#execute()} method to invoke the remote operation.
       *
       * @param id
       * @return the request
       */
      public Progress progress(Long id) throws java.io.IOException {
        Progress result = new Progress(id);
        initialize(result);
        return result;
      }

      public class Progress extends AgentRequest<org.ctoolkit.api.agent.model.ExportJob> {

        private static final String REST_PATH = "export/{id}/job";

        /**
         * Create a request for the method "job.progress".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Progress#execute()} method to invoke the remote operation. <p>
         * {@link
         * Progress#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param id
         * @since 1.13
         */
        protected Progress(Long id) {
          super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.ExportJob.class);
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Progress setAlt(String alt) {
          return (Progress) super.setAlt(alt);
        }

        @Override
        public Progress setFields(String fields) {
          return (Progress) super.setFields(fields);
        }

        @Override
        public Progress setKey(String key) {
          return (Progress) super.setKey(key);
        }

        @Override
        public Progress setOauthToken(String oauthToken) {
          return (Progress) super.setOauthToken(oauthToken);
        }

        @Override
        public Progress setPrettyPrint(Boolean prettyPrint) {
          return (Progress) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Progress setQuotaUser(String quotaUser) {
          return (Progress) super.setQuotaUser(quotaUser);
        }

        @Override
        public Progress setUserIp(String userIp) {
          return (Progress) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Progress setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Progress set(String parameterName, Object value) {
          return (Progress) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "job.start".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Start#execute()} method to invoke the remote operation.
       *
       * @param id
       * @return the request
       */
      public Start start(Long id) throws java.io.IOException {
        Start result = new Start(id);
        initialize(result);
        return result;
      }

      public class Start extends AgentRequest<org.ctoolkit.api.agent.model.ExportJob> {

        private static final String REST_PATH = "export/{id}/job";

        /**
         * Create a request for the method "job.start".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Start#execute()} method to invoke the remote operation. <p> {@link
         * Start#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param id
         * @since 1.13
         */
        protected Start(Long id) {
          super(Agent.this, "POST", REST_PATH, null, org.ctoolkit.api.agent.model.ExportJob.class);
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Start setAlt(String alt) {
          return (Start) super.setAlt(alt);
        }

        @Override
        public Start setFields(String fields) {
          return (Start) super.setFields(fields);
        }

        @Override
        public Start setKey(String key) {
          return (Start) super.setKey(key);
        }

        @Override
        public Start setOauthToken(String oauthToken) {
          return (Start) super.setOauthToken(oauthToken);
        }

        @Override
        public Start setPrettyPrint(Boolean prettyPrint) {
          return (Start) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Start setQuotaUser(String quotaUser) {
          return (Start) super.setQuotaUser(quotaUser);
        }

        @Override
        public Start setUserIp(String userIp) {
          return (Start) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Start setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Start set(String parameterName, Object value) {
          return (Start) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the ImportBatch collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Agent agent = new Agent(...);}
   *   {@code Agent.ImportBatch.List request = agent.importBatch().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public ImportBatch importBatch() {
    return new ImportBatch();
  }

  /**
   * The "importBatch" collection of methods.
   */
  public class ImportBatch {

    /**
     * Create a request for the method "importBatch.delete".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Delete delete(Long id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends AgentRequest<Void> {

      private static final String REST_PATH = "import/{id}";

      /**
       * Create a request for the method "importBatch.delete".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Delete(Long id) {
        super(Agent.this, "DELETE", REST_PATH, null, Void.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete setAlt(String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private Long id;

      /**

       */
      public Long getId() {
        return id;
      }

      public Delete setId(Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "importBatch.get".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Get get(Long id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends AgentRequest<org.ctoolkit.api.agent.model.ImportBatch> {

      private static final String REST_PATH = "import/{id}";

      /**
       * Create a request for the method "importBatch.get".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Get(Long id) {
        super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.ImportBatch.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private Long id;

      /**

       */
      public Long getId() {
        return id;
      }

      public Get setId(Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "importBatch.insert".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link org.ctoolkit.api.agent.model.ImportBatch}
     * @return the request
     */
    public Insert insert(org.ctoolkit.api.agent.model.ImportBatch content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends AgentRequest<org.ctoolkit.api.agent.model.ImportBatch> {

      private static final String REST_PATH = "import";

      /**
       * Create a request for the method "importBatch.insert".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link org.ctoolkit.api.agent.model.ImportBatch}
       * @since 1.13
       */
      protected Insert(org.ctoolkit.api.agent.model.ImportBatch content) {
        super(Agent.this, "POST", REST_PATH, content, org.ctoolkit.api.agent.model.ImportBatch.class);
      }

      @Override
      public Insert setAlt(String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "importBatch.list".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends AgentRequest<org.ctoolkit.api.agent.model.ImportBatchCollection> {

      private static final String REST_PATH = "import";

      /**
       * Create a request for the method "importBatch.list".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.ImportBatchCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private String orderBy;

      /**

       */
      public String getOrderBy() {
        return orderBy;
      }

      public List setOrderBy(String orderBy) {
        this.orderBy = orderBy;
        return this;
      }

      @com.google.api.client.util.Key
      private Integer start;

      /**
     [ default: 0]
     [

       */
      public Integer getStart() {
        return start;
      }

      public List setStart(Integer start) {
        this.start = start;
        return this;
      }

      @com.google.api.client.util.Key
      private Integer length;

      /**
     [ default: 10]
     [

       */
      public Integer getLength() {
        return length;
      }

      public List setLength(Integer length) {
        this.length = length;
        return this;
      }

      @com.google.api.client.util.Key
      private Boolean ascending;

      /**
     [ default: true]
     [

       */
      public Boolean getAscending() {
        return ascending;
      }

      public List setAscending(Boolean ascending) {
        this.ascending = ascending;
        return this;
      }

      /**
       * Convenience method that returns only {@link Boolean#TRUE} or {@link Boolean#FALSE}.
       *
       * <p>
       * Boolean properties can have four possible values:
       * {@code null}, {@link com.google.api.client.util.Data#NULL_BOOLEAN}, {@link Boolean#TRUE}
       * or {@link Boolean#FALSE}.
       * </p>
       *
       * <p>
       * This method returns {@link Boolean#TRUE} if the default of the property is {@link Boolean#TRUE}
       * and it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * {@link Boolean#FALSE} is returned if the default of the property is {@link Boolean#FALSE} and
       * it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * </p>
       *
       * <p>
       *
       * </p>
       */
      public boolean isAscending() {
        if (ascending == null || ascending == com.google.api.client.util.Data.NULL_BOOLEAN) {
          return true;
        }
        return ascending;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "importBatch.update".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param id
     * @param content the {@link org.ctoolkit.api.agent.model.ImportBatch}
     * @return the request
     */
    public Update update(Long id, org.ctoolkit.api.agent.model.ImportBatch content) throws java.io.IOException {
      Update result = new Update(id, content);
      initialize(result);
      return result;
    }

    public class Update extends AgentRequest<org.ctoolkit.api.agent.model.ImportBatch> {

      private static final String REST_PATH = "import/{id}";

      /**
       * Create a request for the method "importBatch.update".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @param content the {@link org.ctoolkit.api.agent.model.ImportBatch}
       * @since 1.13
       */
      protected Update(Long id, org.ctoolkit.api.agent.model.ImportBatch content) {
        super(Agent.this, "PUT", REST_PATH, content, org.ctoolkit.api.agent.model.ImportBatch.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Update setAlt(String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private Long id;

      /**

       */
      public Long getId() {
        return id;
      }

      public Update setId(Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Item collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Agent agent = new Agent(...);}
     *   {@code Agent.Item.List request = agent.item().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Item item() {
      return new Item();
    }

    /**
     * The "item" collection of methods.
     */
    public class Item {

      /**
       * Create a request for the method "item.delete".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param metadataId
       * @param id
       * @return the request
       */
      public Delete delete(Long metadataId, Long id) throws java.io.IOException {
        Delete result = new Delete(metadataId, id);
        initialize(result);
        return result;
      }

      public class Delete extends AgentRequest<Void> {

        private static final String REST_PATH = "import/{metadataId}/item/{id}";

        /**
         * Create a request for the method "item.delete".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param metadataId
         * @param id
         * @since 1.13
         */
        protected Delete(Long metadataId, Long id) {
          super(Agent.this, "DELETE", REST_PATH, null, Void.class);
          this.metadataId = com.google.api.client.util.Preconditions.checkNotNull(metadataId, "Required parameter metadataId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Delete setAlt(String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setFields(String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUserIp(String userIp) {
          return (Delete) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long metadataId;

        /**

         */
        public Long getMetadataId() {
          return metadataId;
        }

        public Delete setMetadataId(Long metadataId) {
          this.metadataId = metadataId;
          return this;
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Delete setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "item.get".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param metadataId
       * @param id
       * @return the request
       */
      public Get get(Long metadataId, Long id) throws java.io.IOException {
        Get result = new Get(metadataId, id);
        initialize(result);
        return result;
      }

      public class Get extends AgentRequest<org.ctoolkit.api.agent.model.ImportItem> {

        private static final String REST_PATH = "import/{metadataId}/item/{id}";

        /**
         * Create a request for the method "item.get".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param metadataId
         * @param id
         * @since 1.13
         */
        protected Get(Long metadataId, Long id) {
          super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.ImportItem.class);
          this.metadataId = com.google.api.client.util.Preconditions.checkNotNull(metadataId, "Required parameter metadataId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get setAlt(String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setFields(String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUserIp(String userIp) {
          return (Get) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long metadataId;

        /**

         */
        public Long getMetadataId() {
          return metadataId;
        }

        public Get setMetadataId(Long metadataId) {
          this.metadataId = metadataId;
          return this;
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Get setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "item.insert".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       *
       * @param metadataId
       * @param content the {@link org.ctoolkit.api.agent.model.ImportItem}
       * @return the request
       */
      public Insert insert(Long metadataId, org.ctoolkit.api.agent.model.ImportItem content) throws java.io.IOException {
        Insert result = new Insert(metadataId, content);
        initialize(result);
        return result;
      }

      public class Insert extends AgentRequest<org.ctoolkit.api.agent.model.ImportItem> {

        private static final String REST_PATH = "import/{metadataId}/item";

        /**
         * Create a request for the method "item.insert".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
         * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param metadataId
         * @param content the {@link org.ctoolkit.api.agent.model.ImportItem}
         * @since 1.13
         */
        protected Insert(Long metadataId, org.ctoolkit.api.agent.model.ImportItem content) {
          super(Agent.this, "POST", REST_PATH, content, org.ctoolkit.api.agent.model.ImportItem.class);
          this.metadataId = com.google.api.client.util.Preconditions.checkNotNull(metadataId, "Required parameter metadataId must be specified.");
        }

        @Override
        public Insert setAlt(String alt) {
          return (Insert) super.setAlt(alt);
        }

        @Override
        public Insert setFields(String fields) {
          return (Insert) super.setFields(fields);
        }

        @Override
        public Insert setKey(String key) {
          return (Insert) super.setKey(key);
        }

        @Override
        public Insert setOauthToken(String oauthToken) {
          return (Insert) super.setOauthToken(oauthToken);
        }

        @Override
        public Insert setPrettyPrint(Boolean prettyPrint) {
          return (Insert) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Insert setQuotaUser(String quotaUser) {
          return (Insert) super.setQuotaUser(quotaUser);
        }

        @Override
        public Insert setUserIp(String userIp) {
          return (Insert) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long metadataId;

        /**

         */
        public Long getMetadataId() {
          return metadataId;
        }

        public Insert setMetadataId(Long metadataId) {
          this.metadataId = metadataId;
          return this;
        }

        @Override
        public Insert set(String parameterName, Object value) {
          return (Insert) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "item.update".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * @param metadataId
       * @param id
       * @param content the {@link org.ctoolkit.api.agent.model.ImportItem}
       * @return the request
       */
      public Update update(Long metadataId, Long id, org.ctoolkit.api.agent.model.ImportItem content) throws java.io.IOException {
        Update result = new Update(metadataId, id, content);
        initialize(result);
        return result;
      }

      public class Update extends AgentRequest<org.ctoolkit.api.agent.model.ImportItem> {

        private static final String REST_PATH = "import/{metadataId}/item/{id}";

        /**
         * Create a request for the method "item.update".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param metadataId
         * @param id
         * @param content the {@link org.ctoolkit.api.agent.model.ImportItem}
         * @since 1.13
         */
        protected Update(Long metadataId, Long id, org.ctoolkit.api.agent.model.ImportItem content) {
          super(Agent.this, "PUT", REST_PATH, content, org.ctoolkit.api.agent.model.ImportItem.class);
          this.metadataId = com.google.api.client.util.Preconditions.checkNotNull(metadataId, "Required parameter metadataId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Update setAlt(String alt) {
          return (Update) super.setAlt(alt);
        }

        @Override
        public Update setFields(String fields) {
          return (Update) super.setFields(fields);
        }

        @Override
        public Update setKey(String key) {
          return (Update) super.setKey(key);
        }

        @Override
        public Update setOauthToken(String oauthToken) {
          return (Update) super.setOauthToken(oauthToken);
        }

        @Override
        public Update setPrettyPrint(Boolean prettyPrint) {
          return (Update) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Update setQuotaUser(String quotaUser) {
          return (Update) super.setQuotaUser(quotaUser);
        }

        @Override
        public Update setUserIp(String userIp) {
          return (Update) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long metadataId;

        /**

         */
        public Long getMetadataId() {
          return metadataId;
        }

        public Update setMetadataId(Long metadataId) {
          this.metadataId = metadataId;
          return this;
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Update setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Update set(String parameterName, Object value) {
          return (Update) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Job collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Agent agent = new Agent(...);}
     *   {@code Agent.Job.List request = agent.job().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Job job() {
      return new Job();
    }

    /**
     * The "job" collection of methods.
     */
    public class Job {

      /**
       * Create a request for the method "job.cancel".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
       *
       * @param id
       * @return the request
       */
      public Cancel cancel(Long id) throws java.io.IOException {
        Cancel result = new Cancel(id);
        initialize(result);
        return result;
      }

      public class Cancel extends AgentRequest<org.ctoolkit.api.agent.model.ImportJob> {

        private static final String REST_PATH = "import/{id}/job";

        /**
         * Create a request for the method "job.cancel".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Cancel#execute()} method to invoke the remote operation. <p> {@link
         * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param id
         * @since 1.13
         */
        protected Cancel(Long id) {
          super(Agent.this, "PUT", REST_PATH, null, org.ctoolkit.api.agent.model.ImportJob.class);
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Cancel setAlt(String alt) {
          return (Cancel) super.setAlt(alt);
        }

        @Override
        public Cancel setFields(String fields) {
          return (Cancel) super.setFields(fields);
        }

        @Override
        public Cancel setKey(String key) {
          return (Cancel) super.setKey(key);
        }

        @Override
        public Cancel setOauthToken(String oauthToken) {
          return (Cancel) super.setOauthToken(oauthToken);
        }

        @Override
        public Cancel setPrettyPrint(Boolean prettyPrint) {
          return (Cancel) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Cancel setQuotaUser(String quotaUser) {
          return (Cancel) super.setQuotaUser(quotaUser);
        }

        @Override
        public Cancel setUserIp(String userIp) {
          return (Cancel) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Cancel setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Cancel set(String parameterName, Object value) {
          return (Cancel) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "job.progress".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Progress#execute()} method to invoke the remote operation.
       *
       * @param id
       * @return the request
       */
      public Progress progress(Long id) throws java.io.IOException {
        Progress result = new Progress(id);
        initialize(result);
        return result;
      }

      public class Progress extends AgentRequest<org.ctoolkit.api.agent.model.ImportJob> {

        private static final String REST_PATH = "import/{id}/job";

        /**
         * Create a request for the method "job.progress".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Progress#execute()} method to invoke the remote operation. <p>
         * {@link
         * Progress#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param id
         * @since 1.13
         */
        protected Progress(Long id) {
          super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.ImportJob.class);
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Progress setAlt(String alt) {
          return (Progress) super.setAlt(alt);
        }

        @Override
        public Progress setFields(String fields) {
          return (Progress) super.setFields(fields);
        }

        @Override
        public Progress setKey(String key) {
          return (Progress) super.setKey(key);
        }

        @Override
        public Progress setOauthToken(String oauthToken) {
          return (Progress) super.setOauthToken(oauthToken);
        }

        @Override
        public Progress setPrettyPrint(Boolean prettyPrint) {
          return (Progress) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Progress setQuotaUser(String quotaUser) {
          return (Progress) super.setQuotaUser(quotaUser);
        }

        @Override
        public Progress setUserIp(String userIp) {
          return (Progress) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Progress setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Progress set(String parameterName, Object value) {
          return (Progress) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "job.start".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Start#execute()} method to invoke the remote operation.
       *
       * @param id
       * @return the request
       */
      public Start start(Long id) throws java.io.IOException {
        Start result = new Start(id);
        initialize(result);
        return result;
      }

      public class Start extends AgentRequest<org.ctoolkit.api.agent.model.ImportJob> {

        private static final String REST_PATH = "import/{id}/job";

        /**
         * Create a request for the method "job.start".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Start#execute()} method to invoke the remote operation. <p> {@link
         * Start#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param id
         * @since 1.13
         */
        protected Start(Long id) {
          super(Agent.this, "POST", REST_PATH, null, org.ctoolkit.api.agent.model.ImportJob.class);
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Start setAlt(String alt) {
          return (Start) super.setAlt(alt);
        }

        @Override
        public Start setFields(String fields) {
          return (Start) super.setFields(fields);
        }

        @Override
        public Start setKey(String key) {
          return (Start) super.setKey(key);
        }

        @Override
        public Start setOauthToken(String oauthToken) {
          return (Start) super.setOauthToken(oauthToken);
        }

        @Override
        public Start setPrettyPrint(Boolean prettyPrint) {
          return (Start) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Start setQuotaUser(String quotaUser) {
          return (Start) super.setQuotaUser(quotaUser);
        }

        @Override
        public Start setUserIp(String userIp) {
          return (Start) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Start setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Start set(String parameterName, Object value) {
          return (Start) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Metadata collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Agent agent = new Agent(...);}
   *   {@code Agent.Metadata.List request = agent.metadata().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Metadata metadata() {
    return new Metadata();
  }

  /**
   * The "metadata" collection of methods.
   */
  public class Metadata {

    /**
     * An accessor for creating requests from the Kind collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Agent agent = new Agent(...);}
     *   {@code Agent.Kind.List request = agent.kind().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Kind kind() {
      return new Kind();
    }

    /**
     * The "kind" collection of methods.
     */
    public class Kind {

      /**
       * Create a request for the method "kind.list".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @return the request
       */
      public List list() throws java.io.IOException {
        List result = new List();
        initialize(result);
        return result;
      }

      public class List extends AgentRequest<org.ctoolkit.api.agent.model.KindMetaDataCollection> {

        private static final String REST_PATH = "metadata/kind";

        /**
         * Create a request for the method "kind.list".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @since 1.13
         */
        protected List() {
          super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.KindMetaDataCollection.class);
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Property collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Agent agent = new Agent(...);}
       *   {@code Agent.Property.List request = agent.property().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Property property() {
        return new Property();
      }

      /**
       * The "property" collection of methods.
       */
      public class Property {

        /**
         * Create a request for the method "property.list".
         *
         * This request holds the parameters needed by the agent server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param kind
         * @return the request
         */
        public List list(String kind) throws java.io.IOException {
          List result = new List(kind);
          initialize(result);
          return result;
        }

        public class List extends AgentRequest<org.ctoolkit.api.agent.model.PropertyMetaDataCollection> {

          private static final String REST_PATH = "metadata/{kind}/property";

          /**
           * Create a request for the method "property.list".
           *
           * This request holds the parameters needed by the the agent server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param kind
           * @since 1.13
           */
          protected List(String kind) {
            super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.PropertyMetaDataCollection.class);
            this.kind = com.google.api.client.util.Preconditions.checkNotNull(kind, "Required parameter kind must be specified.");
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List setAlt(String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setFields(String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUserIp(String userIp) {
            return (List) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private String kind;

          /**

           */
          public String getKind() {
            return kind;
          }

          public List setKind(String kind) {
            this.kind = kind;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * An accessor for creating requests from the MigrationBatch collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Agent agent = new Agent(...);}
   *   {@code Agent.MigrationBatch.List request = agent.migrationBatch().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public MigrationBatch migrationBatch() {
    return new MigrationBatch();
  }

  /**
   * The "migrationBatch" collection of methods.
   */
  public class MigrationBatch {

    /**
     * Create a request for the method "migrationBatch.delete".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Delete delete(Long id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends AgentRequest<Void> {

      private static final String REST_PATH = "migration/{id}";

      /**
       * Create a request for the method "migrationBatch.delete".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Delete(Long id) {
        super(Agent.this, "DELETE", REST_PATH, null, Void.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete setAlt(String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private Long id;

      /**

       */
      public Long getId() {
        return id;
      }

      public Delete setId(Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "migrationBatch.get".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Get get(Long id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends AgentRequest<org.ctoolkit.api.agent.model.MigrationBatch> {

      private static final String REST_PATH = "migration/{id}";

      /**
       * Create a request for the method "migrationBatch.get".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Get(Long id) {
        super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.MigrationBatch.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private Long id;

      /**

       */
      public Long getId() {
        return id;
      }

      public Get setId(Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "migrationBatch.insert".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link org.ctoolkit.api.agent.model.MigrationBatch}
     * @return the request
     */
    public Insert insert(org.ctoolkit.api.agent.model.MigrationBatch content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends AgentRequest<org.ctoolkit.api.agent.model.MigrationBatch> {

      private static final String REST_PATH = "migration";

      /**
       * Create a request for the method "migrationBatch.insert".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link org.ctoolkit.api.agent.model.MigrationBatch}
       * @since 1.13
       */
      protected Insert(org.ctoolkit.api.agent.model.MigrationBatch content) {
        super(Agent.this, "POST", REST_PATH, content, org.ctoolkit.api.agent.model.MigrationBatch.class);
      }

      @Override
      public Insert setAlt(String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "migrationBatch.list".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends AgentRequest<org.ctoolkit.api.agent.model.MigrationBatchCollection> {

      private static final String REST_PATH = "migration";

      /**
       * Create a request for the method "migrationBatch.list".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.MigrationBatchCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private String orderBy;

      /**

       */
      public String getOrderBy() {
        return orderBy;
      }

      public List setOrderBy(String orderBy) {
        this.orderBy = orderBy;
        return this;
      }

      @com.google.api.client.util.Key
      private Integer start;

      /**
     [ default: 0]
     [

       */
      public Integer getStart() {
        return start;
      }

      public List setStart(Integer start) {
        this.start = start;
        return this;
      }

      @com.google.api.client.util.Key
      private Integer length;

      /**
     [ default: 10]
     [

       */
      public Integer getLength() {
        return length;
      }

      public List setLength(Integer length) {
        this.length = length;
        return this;
      }

      @com.google.api.client.util.Key
      private Boolean ascending;

      /**
     [ default: true]
     [

       */
      public Boolean getAscending() {
        return ascending;
      }

      public List setAscending(Boolean ascending) {
        this.ascending = ascending;
        return this;
      }

      /**
       * Convenience method that returns only {@link Boolean#TRUE} or {@link Boolean#FALSE}.
       *
       * <p>
       * Boolean properties can have four possible values:
       * {@code null}, {@link com.google.api.client.util.Data#NULL_BOOLEAN}, {@link Boolean#TRUE}
       * or {@link Boolean#FALSE}.
       * </p>
       *
       * <p>
       * This method returns {@link Boolean#TRUE} if the default of the property is {@link Boolean#TRUE}
       * and it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * {@link Boolean#FALSE} is returned if the default of the property is {@link Boolean#FALSE} and
       * it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * </p>
       *
       * <p>
       *
       * </p>
       */
      public boolean isAscending() {
        if (ascending == null || ascending == com.google.api.client.util.Data.NULL_BOOLEAN) {
          return true;
        }
        return ascending;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "migrationBatch.update".
     *
     * This request holds the parameters needed by the agent server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param id
     * @param content the {@link org.ctoolkit.api.agent.model.MigrationBatch}
     * @return the request
     */
    public Update update(Long id, org.ctoolkit.api.agent.model.MigrationBatch content) throws java.io.IOException {
      Update result = new Update(id, content);
      initialize(result);
      return result;
    }

    public class Update extends AgentRequest<org.ctoolkit.api.agent.model.MigrationBatch> {

      private static final String REST_PATH = "migration/{id}";

      /**
       * Create a request for the method "migrationBatch.update".
       *
       * This request holds the parameters needed by the the agent server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @param content the {@link org.ctoolkit.api.agent.model.MigrationBatch}
       * @since 1.13
       */
      protected Update(Long id, org.ctoolkit.api.agent.model.MigrationBatch content) {
        super(Agent.this, "PUT", REST_PATH, content, org.ctoolkit.api.agent.model.MigrationBatch.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Update setAlt(String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private Long id;

      /**

       */
      public Long getId() {
        return id;
      }

      public Update setId(Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Item collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Agent agent = new Agent(...);}
     *   {@code Agent.Item.List request = agent.item().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Item item() {
      return new Item();
    }

    /**
     * The "item" collection of methods.
     */
    public class Item {

      /**
       * Create a request for the method "item.delete".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param metadataId
       * @param id
       * @return the request
       */
      public Delete delete(Long metadataId, Long id) throws java.io.IOException {
        Delete result = new Delete(metadataId, id);
        initialize(result);
        return result;
      }

      public class Delete extends AgentRequest<Void> {

        private static final String REST_PATH = "migration/{metadataId}/item/{id}";

        /**
         * Create a request for the method "item.delete".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param metadataId
         * @param id
         * @since 1.13
         */
        protected Delete(Long metadataId, Long id) {
          super(Agent.this, "DELETE", REST_PATH, null, Void.class);
          this.metadataId = com.google.api.client.util.Preconditions.checkNotNull(metadataId, "Required parameter metadataId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Delete setAlt(String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setFields(String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUserIp(String userIp) {
          return (Delete) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long metadataId;

        /**

         */
        public Long getMetadataId() {
          return metadataId;
        }

        public Delete setMetadataId(Long metadataId) {
          this.metadataId = metadataId;
          return this;
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Delete setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "item.get".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param metadataId
       * @param id
       * @return the request
       */
      public Get get(Long metadataId, Long id) throws java.io.IOException {
        Get result = new Get(metadataId, id);
        initialize(result);
        return result;
      }

      public class Get extends AgentRequest<org.ctoolkit.api.agent.model.MigrationItem> {

        private static final String REST_PATH = "migration/{metadataId}/item/{id}";

        /**
         * Create a request for the method "item.get".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param metadataId
         * @param id
         * @since 1.13
         */
        protected Get(Long metadataId, Long id) {
          super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.MigrationItem.class);
          this.metadataId = com.google.api.client.util.Preconditions.checkNotNull(metadataId, "Required parameter metadataId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get setAlt(String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setFields(String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUserIp(String userIp) {
          return (Get) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long metadataId;

        /**

         */
        public Long getMetadataId() {
          return metadataId;
        }

        public Get setMetadataId(Long metadataId) {
          this.metadataId = metadataId;
          return this;
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Get setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "item.insert".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       *
       * @param metadataId
       * @param content the {@link org.ctoolkit.api.agent.model.MigrationItem}
       * @return the request
       */
      public Insert insert(Long metadataId, org.ctoolkit.api.agent.model.MigrationItem content) throws java.io.IOException {
        Insert result = new Insert(metadataId, content);
        initialize(result);
        return result;
      }

      public class Insert extends AgentRequest<org.ctoolkit.api.agent.model.MigrationItem> {

        private static final String REST_PATH = "migration/{metadataId}/item";

        /**
         * Create a request for the method "item.insert".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
         * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param metadataId
         * @param content the {@link org.ctoolkit.api.agent.model.MigrationItem}
         * @since 1.13
         */
        protected Insert(Long metadataId, org.ctoolkit.api.agent.model.MigrationItem content) {
          super(Agent.this, "POST", REST_PATH, content, org.ctoolkit.api.agent.model.MigrationItem.class);
          this.metadataId = com.google.api.client.util.Preconditions.checkNotNull(metadataId, "Required parameter metadataId must be specified.");
        }

        @Override
        public Insert setAlt(String alt) {
          return (Insert) super.setAlt(alt);
        }

        @Override
        public Insert setFields(String fields) {
          return (Insert) super.setFields(fields);
        }

        @Override
        public Insert setKey(String key) {
          return (Insert) super.setKey(key);
        }

        @Override
        public Insert setOauthToken(String oauthToken) {
          return (Insert) super.setOauthToken(oauthToken);
        }

        @Override
        public Insert setPrettyPrint(Boolean prettyPrint) {
          return (Insert) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Insert setQuotaUser(String quotaUser) {
          return (Insert) super.setQuotaUser(quotaUser);
        }

        @Override
        public Insert setUserIp(String userIp) {
          return (Insert) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long metadataId;

        /**

         */
        public Long getMetadataId() {
          return metadataId;
        }

        public Insert setMetadataId(Long metadataId) {
          this.metadataId = metadataId;
          return this;
        }

        @Override
        public Insert set(String parameterName, Object value) {
          return (Insert) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "item.update".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * @param metadataId
       * @param id
       * @param content the {@link org.ctoolkit.api.agent.model.MigrationItem}
       * @return the request
       */
      public Update update(Long metadataId, Long id, org.ctoolkit.api.agent.model.MigrationItem content) throws java.io.IOException {
        Update result = new Update(metadataId, id, content);
        initialize(result);
        return result;
      }

      public class Update extends AgentRequest<org.ctoolkit.api.agent.model.MigrationItem> {

        private static final String REST_PATH = "migration/{metadataId}/item/{id}";

        /**
         * Create a request for the method "item.update".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param metadataId
         * @param id
         * @param content the {@link org.ctoolkit.api.agent.model.MigrationItem}
         * @since 1.13
         */
        protected Update(Long metadataId, Long id, org.ctoolkit.api.agent.model.MigrationItem content) {
          super(Agent.this, "PUT", REST_PATH, content, org.ctoolkit.api.agent.model.MigrationItem.class);
          this.metadataId = com.google.api.client.util.Preconditions.checkNotNull(metadataId, "Required parameter metadataId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Update setAlt(String alt) {
          return (Update) super.setAlt(alt);
        }

        @Override
        public Update setFields(String fields) {
          return (Update) super.setFields(fields);
        }

        @Override
        public Update setKey(String key) {
          return (Update) super.setKey(key);
        }

        @Override
        public Update setOauthToken(String oauthToken) {
          return (Update) super.setOauthToken(oauthToken);
        }

        @Override
        public Update setPrettyPrint(Boolean prettyPrint) {
          return (Update) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Update setQuotaUser(String quotaUser) {
          return (Update) super.setQuotaUser(quotaUser);
        }

        @Override
        public Update setUserIp(String userIp) {
          return (Update) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long metadataId;

        /**

         */
        public Long getMetadataId() {
          return metadataId;
        }

        public Update setMetadataId(Long metadataId) {
          this.metadataId = metadataId;
          return this;
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Update setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Update set(String parameterName, Object value) {
          return (Update) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Job collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Agent agent = new Agent(...);}
     *   {@code Agent.Job.List request = agent.job().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Job job() {
      return new Job();
    }

    /**
     * The "job" collection of methods.
     */
    public class Job {

      /**
       * Create a request for the method "job.cancel".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
       *
       * @param id
       * @return the request
       */
      public Cancel cancel(Long id) throws java.io.IOException {
        Cancel result = new Cancel(id);
        initialize(result);
        return result;
      }

      public class Cancel extends AgentRequest<org.ctoolkit.api.agent.model.MigrationJob> {

        private static final String REST_PATH = "migration/{id}/job";

        /**
         * Create a request for the method "job.cancel".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Cancel#execute()} method to invoke the remote operation. <p> {@link
         * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param id
         * @since 1.13
         */
        protected Cancel(Long id) {
          super(Agent.this, "PUT", REST_PATH, null, org.ctoolkit.api.agent.model.MigrationJob.class);
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Cancel setAlt(String alt) {
          return (Cancel) super.setAlt(alt);
        }

        @Override
        public Cancel setFields(String fields) {
          return (Cancel) super.setFields(fields);
        }

        @Override
        public Cancel setKey(String key) {
          return (Cancel) super.setKey(key);
        }

        @Override
        public Cancel setOauthToken(String oauthToken) {
          return (Cancel) super.setOauthToken(oauthToken);
        }

        @Override
        public Cancel setPrettyPrint(Boolean prettyPrint) {
          return (Cancel) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Cancel setQuotaUser(String quotaUser) {
          return (Cancel) super.setQuotaUser(quotaUser);
        }

        @Override
        public Cancel setUserIp(String userIp) {
          return (Cancel) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Cancel setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Cancel set(String parameterName, Object value) {
          return (Cancel) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "job.progress".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Progress#execute()} method to invoke the remote operation.
       *
       * @param id
       * @return the request
       */
      public Progress progress(Long id) throws java.io.IOException {
        Progress result = new Progress(id);
        initialize(result);
        return result;
      }

      public class Progress extends AgentRequest<org.ctoolkit.api.agent.model.MigrationJob> {

        private static final String REST_PATH = "migration/{id}/job";

        /**
         * Create a request for the method "job.progress".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Progress#execute()} method to invoke the remote operation. <p>
         * {@link
         * Progress#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param id
         * @since 1.13
         */
        protected Progress(Long id) {
          super(Agent.this, "GET", REST_PATH, null, org.ctoolkit.api.agent.model.MigrationJob.class);
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Progress setAlt(String alt) {
          return (Progress) super.setAlt(alt);
        }

        @Override
        public Progress setFields(String fields) {
          return (Progress) super.setFields(fields);
        }

        @Override
        public Progress setKey(String key) {
          return (Progress) super.setKey(key);
        }

        @Override
        public Progress setOauthToken(String oauthToken) {
          return (Progress) super.setOauthToken(oauthToken);
        }

        @Override
        public Progress setPrettyPrint(Boolean prettyPrint) {
          return (Progress) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Progress setQuotaUser(String quotaUser) {
          return (Progress) super.setQuotaUser(quotaUser);
        }

        @Override
        public Progress setUserIp(String userIp) {
          return (Progress) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Progress setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Progress set(String parameterName, Object value) {
          return (Progress) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "job.start".
       *
       * This request holds the parameters needed by the agent server.  After setting any optional
       * parameters, call the {@link Start#execute()} method to invoke the remote operation.
       *
       * @param id
       * @return the request
       */
      public Start start(Long id) throws java.io.IOException {
        Start result = new Start(id);
        initialize(result);
        return result;
      }

      public class Start extends AgentRequest<org.ctoolkit.api.agent.model.MigrationJob> {

        private static final String REST_PATH = "migration/{id}/job";

        /**
         * Create a request for the method "job.start".
         *
         * This request holds the parameters needed by the the agent server.  After setting any optional
         * parameters, call the {@link Start#execute()} method to invoke the remote operation. <p> {@link
         * Start#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param id
         * @since 1.13
         */
        protected Start(Long id) {
          super(Agent.this, "POST", REST_PATH, null, org.ctoolkit.api.agent.model.MigrationJob.class);
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Start setAlt(String alt) {
          return (Start) super.setAlt(alt);
        }

        @Override
        public Start setFields(String fields) {
          return (Start) super.setFields(fields);
        }

        @Override
        public Start setKey(String key) {
          return (Start) super.setKey(key);
        }

        @Override
        public Start setOauthToken(String oauthToken) {
          return (Start) super.setOauthToken(oauthToken);
        }

        @Override
        public Start setPrettyPrint(Boolean prettyPrint) {
          return (Start) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Start setQuotaUser(String quotaUser) {
          return (Start) super.setQuotaUser(quotaUser);
        }

        @Override
        public Start setUserIp(String userIp) {
          return (Start) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private Long id;

        /**

         */
        public Long getId() {
          return id;
        }

        public Start setId(Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Start set(String parameterName, Object value) {
          return (Start) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link Agent}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Agent}. */
    @Override
    public Agent build() {
      return new Agent(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link AgentRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setAgentRequestInitializer(
        AgentRequestInitializer agentRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(agentRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
